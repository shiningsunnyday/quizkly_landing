import React, { Component } from 'react';
import Flashcard from './Flashcard.js';
import { Button } from 'primereact/button';
import {InputSwitch} from 'primereact/inputswitch';
import ArrowKeysReact from 'arrow-keys-react';
import './Interface.css';

class Flashcards extends Component  {

  constructor(props) {
    super(props);
    console.log("Constructor called");
    var shuffle = require('shuffle-array');
    this.shuffleAnswers = this.shuffleAnswers.bind(this);
    this.state.originalOrder = JSON.parse(JSON.stringify(props.quiz));
    this.state.originalOrder = this.shuffleAnswers(this.state.originalOrder);
    this.state.randoQuiz = JSON.parse(JSON.stringify(props.quiz));
    this.state.randoQuiz.quiz = shuffle(JSON.parse(JSON.stringify(props.quiz.quiz)));
    this.state.quiz = this.state.originalOrder;
    this.state.curIndex = 0;
    this.shuffleAnswers(this.state.randoQuiz);
    console.log("Passed order ", props.quiz)
    console.log("Original order ", this.state.originalOrder)
    console.log("Rando quiz", this.state.randoQuiz);
    ArrowKeysReact.config({
      left: () => {
        if(this.state.curIndex >= 1) {
          this.setState({curIndex: this.state.curIndex - 1, clickedIndex: -1})
        }
      },
      right: () => {
        this.setState({curIndex: this.state.curIndex + 1, clickedIndex: -1})
      }
    });
  }

  componentDidMount() {
    document.getElementById("topFlashcard").focus();
  }

  shuffleAnswers = (quiz) => {
    console.log(quiz);
    var shuffle = require('shuffle-array');
    for(var ques = 0; ques < quiz.quiz.length; ques++) {
      var correctIndex = quiz.quiz[ques].correctIndex;
      var correctAns = quiz.quiz[ques].answers[correctIndex];
      quiz.quiz[ques].answers = shuffle(quiz.quiz[ques].answers);
      quiz.quiz[ques].correctIndex = quiz.quiz[ques].answers.indexOf(correctAns);
    }
    return quiz;
  }

  state = {
    quiz: null,
    originalOrder: null,
    shuffle: false,
    randoQuiz: null,
    curIndex: -1,
    clickedIndex: -1,
    correct: 0,
  }

  random() {
    this.setState({curIndex: 0});
  }

  checkShuffle(e) {
    console.log("Check shuffle called")
    console.log(e.value)
    var shuffle = require('shuffle-array');
    if(e.value) {
      var newRando = this.state.randoQuiz;
      shuffle(newRando.quiz);
      console.log(newRando.quiz);
      this.shuffleAnswers(newRando);
      this.setState({shuffle: true, quiz: newRando, curIndex: 0, correct: 0, clickedIndex: -1})
    } else {
      this.setState({shuffle: false, quiz: this.state.originalOrder, curIndex: 0, correct: 0, clickedIndex: -1})
    }
  }

  answerClick(e) {
    console.log("Clicked index is ", e.target.getAttribute('index'));
    console.log("Current quiz is ", this.state.curIndex);
    this.setState({clickedIndex: e.target.getAttribute('index')});
    if(e.target.getAttribute('index') == this.state.quiz.quiz[this.state.curIndex].correctIndex) {
      this.setState({correct: this.state.correct + 1});
    }
  }
  //
  // <div style={styles.earthlings}>Hey earthlings, are you ready to tackle the quiz generated by our powerful machine learning models?</div>
  // <div style={styles.poison}>Pick your poison</div>

  render() {
    if(this.state.curIndex === this.state.quiz.quiz.length) {
      return(
        <div style={styles.welcomeScreen}>
          <div style={styles.scoreBoard}>
            <div style={{display: 'flex', flex: 1, fontSize: '5vw', justifyContent: 'center', alignItems: 'center'}}>You received a score of</div>
            <div style={{display: 'flex', flex: 2, fontSize: '30vw', justifyContent: 'center', alignItems: 'center'}}>{this.state.correct}</div>
            <div style={{display: 'flex', flex: 1, fontSize: '5vw', justifyContent: 'center', alignItems: 'center'}}>out of {this.state.quiz.quiz.length}.</div>
          </div>
        </div>
      )
    }
    return (
      <div id="topFlashcard" style={styles.flashcard} {...ArrowKeysReact.events} tabIndex="1">
        <div style={styles.navButtonDiv}>
        </div>
        <Flashcard
          total={this.state.quiz.quiz.length}
          cur={this.state.curIndex}
          style={styles.flashcardCenter}
          clickedIndex={this.state.clickedIndex}
          answerClick={this.answerClick.bind(this)}
          question={this.state.quiz.quiz[this.state.curIndex]} />
        <div style={styles.navButtonDiv}>
          <div style={{display: 'flex', flex: 4.5, flexDirection: 'column', alignItems: 'center'}}>
            <div style={{display: 'flex', alignItems: 'center', flex: 2, marginRight: '10%', fontSize: '1vw', fontFamily: 'Lato'}}>Shuffle</div>
            <InputSwitch style={{display: 'flex', justifyContent: 'center', width: '2.5vw', flex: 1}} onLabel="Shuffle"
              offLabel="Original"
              checked={this.state.shuffle}
              onChange={this.checkShuffle.bind(this)} />
            <div style={{flex: 10}} />
          </div>
          <div style={styles.navButton}/>
          <div style={{flex: 4.5}} />
        </div>
      </div>
    )
  }


}

// <div style={{flex: 4.5}}/>
// <Button icon="pi pi-arrow-left"
//   onClick={() => this.setState({clickedIndex: -1, curIndex: this.state.curIndex - 1})}
//   style={styles.navButton}/>
// <div style={{flex: 4.5}} />

// <div style={{display: 'flex', flex: 4.5, flexDirection: 'column', alignItems: 'center'}}>
//   <div style={{display: 'flex', alignItems: 'center', flex: 2, marginRight: '10%', fontSize: '1vw', fontFamily: 'Lato'}}>Shuffle</div>
//   <InputSwitch style={{display: 'flex', justifyContent: 'center', width: '2.5vw', flex: 1}} onLabel="Shuffle"
//     offLabel="Original"
//     checked={this.state.shuffle}
//     onChange={this.checkShuffle.bind(this)} />
//   <div style={{flex: 10}} />
// </div>
// <Button icon="pi pi-arrow-right"
//   onClick={() => this.setState({clickedIndex: -1, curIndex: (this.state.curIndex + 1)})}
//   style={styles.navButton}/>
// <div style={{flex: 4.5}} />

const styles = {
  scoreBoard: {
    display: 'flex',
    fontSize: '10vh',
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center'
  },
  welcomeScreen: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'stretch',
    backgroundColor: 'yellow',
    position: 'relative',
    width: '100%',
    height: '100%',
  },
  earthlings: {
    flex: 1.5,
    margin: '5%',
    marginBottom: '0%',
    textAlign: 'center',
    fontFamily: 'Lato',
    fontSize: '200%'
  },
  poison: {
    flex: 1,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    fontFamily: 'Lato',
    fontSize: '300%'
  },
  options: {
    flex: 2,
    display: 'flex',
    flexDirection: 'row',
    backgroundColor: 'yellow',
    justifyContent: 'center',
    alignItems: 'stretch',
  },
  flashcard: {
    position: 'relative',
    display: 'flex',
    flexDirection: 'row',
    backgroundColor: 'yellow',
    width: '100%',
    height: '100%'
  },
  flashcardCenter: {
    flex: 4,
  },
  navButtonDiv: {
    position: 'relative',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    width: '20%',
  },
  navButton: {
    position: 'relative',
    height: '100%',
    width: '50%',
    flex: 1,
  },
  option: {
    flex: 1,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    cursor: 'pointer',
    fontFamily: 'Lato',
    fontSize: '400%',
  },
}

export default Flashcards;

        // <Flashcard question={quiz[]} choices={quiz[]} />
